 		Razor Pages in ASP.NET Core : Hızlı ve kolay uygulama geliştirmek için kullanılan yeni bir web uygulama geliştirme yöntemidir. 
	Sayfa tabanlı web uygulamalarını çok daha kolay ve üretken bir şekilde kodlamanızı sağlayan yeni bir yapı sunar. 
	Razor @ işareti ile C# kodlarına geçmemizi sağlıyor. HTML ile iç içe kullanım imkanı sunuyor. 


1) .net core web app => web app

	Pages folder : .cshtml file that contains HTML markup with C# code using Razor syntax. 
	       		.cshtml.cs file that contains C# code that handles page events.

			Supporting files have names that begin with an underscore. For example, the _Layout.cshtml : common things in all the pages.


	wwwroot folder : Contains static files, such as HTML files, JavaScript files, and CSS files.

	appSettings.json : Contains configuration data, such as connection strings.
	
	Program.cs : Contains the entry point for the program.

	Startup.cs : Contains code that configures app behavior. 



2) Add a model to a Razor Pages app in ASP.NET Core

	The app's model classes use Entity Framework Core (EF Core) to work with the database. EF Core simplifies data access.

	RazorPagesMovie project > Add > New Folder(Models) > Add > Class. Name the class Movie.

	The ID field is required by the database for the primary key.
	[DataType(DataType.Date)]: The DataType attribute specifies the type of the data (Date).
	

3) Scaffold the movie model

	The scaffolding tool produces pages for Create, Read, Update, and Delete (CRUD) operations for the movie model

. Pages folder > Add > New Folder(Movies) && Pages/Movies folder > Add > New Scaffolded Item.
In the Add Scaffold dialog, select Razor Pages using Entity Framework (CRUD) > Add. // Model class : Movie (RazorPagesMovie.Models) // Data Context class : RazorPagesMovie.Data.RazorPagesMovieContext. 
The appsettings.json file is updated with the connection string used to connect to a local database.


	Initial Migration : 

	NuGet Package Manager > Package Manager Console : Add-Migration InitialCreate
						  	  Update-Database


	The migrations command generates code to create the initial database schema. The schema is based on the model specified in DbContext.


4) Examine the context registered with dependency injection (Startup.ConfigureServices)


	ASP.NET Core is built with dependency injection. Services (such as the EF Core DB context) are registered with dependency injection during application startup. Components that require these services (such as Razor Pages) are provided these services via constructor parameters. The scaffolding tool automatically created a DB context and registered it with the dependency injection container.


5) The data context (RazorPagesMovieContext) is derived from Microsoft.EntityFrameworkCore.DbContext. The data context specifies which entities are included in the data model. (RazorPagesMovie.Models)

	The name of the connection string is passed in to the context by calling a method on a DbContextOptions object. For local development, the ASP.NET Core configuration system reads the connection string from the appsettings.json file. Run the app and append /Movies to the URL in the browser (http://localhost:port/movies).


	